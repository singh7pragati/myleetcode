1963. Minimum Number of Swaps to Make the String Balanced
Medium

You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.

A string is called balanced if and only if:
1. It is the empty string, or
2. It can be written as AB, where both A and B are balanced strings, or
3. It can be written as [C], where C is a balanced string.
You may swap the brackets at any two indices any number of times.
Return the minimum number of swaps to make s balanced.

Example 1:
Input: s = "][]["
Output: 1
Explanation: You can make the string balanced by swapping index 0 with index 3.
The resulting string is "[[]]".

Example 2:
Input: s = "]]][[["
Output: 2
Explanation: You can do the following to make the string balanced:
- Swap index 0 with index 4. s = "[]][][".
- Swap index 1 with index 5. s = "[[][]]".
The resulting string is "[[][]]".

class Solution {
public:
    int minSwaps(string s) {
        //stack < char > st;
        int size = 0;
        for(char &ch : s){
            if(ch == '['){
                size++;
            }
            else if(size > 0){
                size--;
            }
        }
         
        return (size + 1)/2;
    }
};

or with stack

class Solution {
public:
    int minLength(string s) {  
        int n = s.length();
        stack <char> st;
        int i = 0;
        while(i < n){
            if(!st.empty() && (s[i] == 'B' && st.top() == 'A' || s[i] == 'D' && st.top() == 'C')){
                st.pop();
                i++;
            }
            else{
                st.push(s[i]);
                i++;
            }

        }
        return st.size();
    }
};